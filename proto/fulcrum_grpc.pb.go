// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/fulcrum.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FulcrumClient is the client API for Fulcrum service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FulcrumClient interface {
	AgregarBase(ctx context.Context, in *AgregarBaseRequest, opts ...grpc.CallOption) (*AgregarBaseResponse, error)
	RenombrarBase(ctx context.Context, in *RenombrarBaseRequest, opts ...grpc.CallOption) (*RenombrarBaseResponse, error)
	ActualizarValor(ctx context.Context, in *ActualizarValorRequest, opts ...grpc.CallOption) (*ActualizarValorResponse, error)
	BorrarBase(ctx context.Context, in *BorrarBaseRequest, opts ...grpc.CallOption) (*BorrarBaseResponse, error)
	GetEnemigos(ctx context.Context, in *GetEnemigosRequest, opts ...grpc.CallOption) (*GetEnemigosResponse, error)
}

type fulcrumClient struct {
	cc grpc.ClientConnInterface
}

func NewFulcrumClient(cc grpc.ClientConnInterface) FulcrumClient {
	return &fulcrumClient{cc}
}

func (c *fulcrumClient) AgregarBase(ctx context.Context, in *AgregarBaseRequest, opts ...grpc.CallOption) (*AgregarBaseResponse, error) {
	out := new(AgregarBaseResponse)
	err := c.cc.Invoke(ctx, "/fulcrum.Fulcrum/AgregarBase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulcrumClient) RenombrarBase(ctx context.Context, in *RenombrarBaseRequest, opts ...grpc.CallOption) (*RenombrarBaseResponse, error) {
	out := new(RenombrarBaseResponse)
	err := c.cc.Invoke(ctx, "/fulcrum.Fulcrum/RenombrarBase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulcrumClient) ActualizarValor(ctx context.Context, in *ActualizarValorRequest, opts ...grpc.CallOption) (*ActualizarValorResponse, error) {
	out := new(ActualizarValorResponse)
	err := c.cc.Invoke(ctx, "/fulcrum.Fulcrum/ActualizarValor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulcrumClient) BorrarBase(ctx context.Context, in *BorrarBaseRequest, opts ...grpc.CallOption) (*BorrarBaseResponse, error) {
	out := new(BorrarBaseResponse)
	err := c.cc.Invoke(ctx, "/fulcrum.Fulcrum/BorrarBase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulcrumClient) GetEnemigos(ctx context.Context, in *GetEnemigosRequest, opts ...grpc.CallOption) (*GetEnemigosResponse, error) {
	out := new(GetEnemigosResponse)
	err := c.cc.Invoke(ctx, "/fulcrum.Fulcrum/GetEnemigos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FulcrumServer is the server API for Fulcrum service.
// All implementations must embed UnimplementedFulcrumServer
// for forward compatibility
type FulcrumServer interface {
	AgregarBase(context.Context, *AgregarBaseRequest) (*AgregarBaseResponse, error)
	RenombrarBase(context.Context, *RenombrarBaseRequest) (*RenombrarBaseResponse, error)
	ActualizarValor(context.Context, *ActualizarValorRequest) (*ActualizarValorResponse, error)
	BorrarBase(context.Context, *BorrarBaseRequest) (*BorrarBaseResponse, error)
	GetEnemigos(context.Context, *GetEnemigosRequest) (*GetEnemigosResponse, error)
	mustEmbedUnimplementedFulcrumServer()
}

// UnimplementedFulcrumServer must be embedded to have forward compatible implementations.
type UnimplementedFulcrumServer struct {
}

func (UnimplementedFulcrumServer) AgregarBase(context.Context, *AgregarBaseRequest) (*AgregarBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgregarBase not implemented")
}
func (UnimplementedFulcrumServer) RenombrarBase(context.Context, *RenombrarBaseRequest) (*RenombrarBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenombrarBase not implemented")
}
func (UnimplementedFulcrumServer) ActualizarValor(context.Context, *ActualizarValorRequest) (*ActualizarValorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActualizarValor not implemented")
}
func (UnimplementedFulcrumServer) BorrarBase(context.Context, *BorrarBaseRequest) (*BorrarBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BorrarBase not implemented")
}
func (UnimplementedFulcrumServer) GetEnemigos(context.Context, *GetEnemigosRequest) (*GetEnemigosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnemigos not implemented")
}
func (UnimplementedFulcrumServer) mustEmbedUnimplementedFulcrumServer() {}

// UnsafeFulcrumServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FulcrumServer will
// result in compilation errors.
type UnsafeFulcrumServer interface {
	mustEmbedUnimplementedFulcrumServer()
}

func RegisterFulcrumServer(s grpc.ServiceRegistrar, srv FulcrumServer) {
	s.RegisterService(&Fulcrum_ServiceDesc, srv)
}

func _Fulcrum_AgregarBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgregarBaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcrumServer).AgregarBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fulcrum.Fulcrum/AgregarBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcrumServer).AgregarBase(ctx, req.(*AgregarBaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fulcrum_RenombrarBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenombrarBaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcrumServer).RenombrarBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fulcrum.Fulcrum/RenombrarBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcrumServer).RenombrarBase(ctx, req.(*RenombrarBaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fulcrum_ActualizarValor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActualizarValorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcrumServer).ActualizarValor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fulcrum.Fulcrum/ActualizarValor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcrumServer).ActualizarValor(ctx, req.(*ActualizarValorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fulcrum_BorrarBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BorrarBaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcrumServer).BorrarBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fulcrum.Fulcrum/BorrarBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcrumServer).BorrarBase(ctx, req.(*BorrarBaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fulcrum_GetEnemigos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnemigosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcrumServer).GetEnemigos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fulcrum.Fulcrum/GetEnemigos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcrumServer).GetEnemigos(ctx, req.(*GetEnemigosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Fulcrum_ServiceDesc is the grpc.ServiceDesc for Fulcrum service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fulcrum_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fulcrum.Fulcrum",
	HandlerType: (*FulcrumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AgregarBase",
			Handler:    _Fulcrum_AgregarBase_Handler,
		},
		{
			MethodName: "RenombrarBase",
			Handler:    _Fulcrum_RenombrarBase_Handler,
		},
		{
			MethodName: "ActualizarValor",
			Handler:    _Fulcrum_ActualizarValor_Handler,
		},
		{
			MethodName: "BorrarBase",
			Handler:    _Fulcrum_BorrarBase_Handler,
		},
		{
			MethodName: "GetEnemigos",
			Handler:    _Fulcrum_GetEnemigos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/fulcrum.proto",
}
